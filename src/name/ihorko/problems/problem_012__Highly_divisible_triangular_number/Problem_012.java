package name.ihorko.problems.problem_012__Highly_divisible_triangular_number;

import javax.sound.midi.Track;
import java.math.BigInteger;
import java.util.logging.Logger;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Answer: 76576500
 *      Triangular number of 12375 = 76576500(576)
 */

public class Problem_012 {
    static Logger logger = Logger.getLogger(Problem_012.class.getSimpleName());
    public static void main(String[] args) {
        solve();
    }

    public void solve(long from) {
        long counter = from;
        long triangularNumber;
        long quantityOfFactors=0;
        while (counter<counter+5000) {
            triangularNumber = triangularNumber(counter++);
            if ((quantityOfFactors = quantityOfFactors(triangularNumber)) > 500) break;
//            logger.info(triangularNumber + " -> " + quantityOfFactors);
        }
        System.out.println("Triangular number of " + (counter-1) + " = " + quantityOfFactors);
    }

    static int triangularNumber(long number) {
        int triangularNumber = 0;
        for (long i = 1; i <= number; i++) {
            triangularNumber += i;
        }
        return triangularNumber;
    }
    static int quantityOfFactors(long number) {
        int counter = 0;
        for (long i = 1; i <= number; i++) {
            if (number%i == 0) counter++;
        }
        return counter;
    }
    static void solve() {
        long counter = 1;
        long triangularNumber;
        long quantityOfFactors;
        while (true) {
            triangularNumber = 0;
            for (int i = 1; i <= counter; i++) {
                triangularNumber += i;
            }
            quantityOfFactors = 0;
            for (int i = 1; i <= triangularNumber; i++) {
                if (triangularNumber%i == 0) quantityOfFactors++;
            }
            if (quantityOfFactors > 500) break;
            counter++;
        }
        System.out.println("Triangular number of " + counter + " = " + triangularNumber + "(" + quantityOfFactors + ")");
    }




}
